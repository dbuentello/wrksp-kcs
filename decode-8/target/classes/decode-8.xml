<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:objectstore="http://www.mulesoft.org/schema/mule/objectstore"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/objectstore http://www.mulesoft.org/schema/mule/objectstore/current/mule-objectstore.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="8081" doc:name="HTTP Listener Configuration"/>
    <configuration doc:name="Configuration">
	  <expression-language autoResolveVariables="false">
	    <global-functions>
	      def decodeBase64(data) { java.util.Base64.getDecoder().decode(data) }
	      def encodeBase64(data) { java.util.Base64.getEncoder().encode(data) }
	      def dec2hex(data) { com.mule.custom.kcs.Hex2value.decimal2hex(data) }
	    </global-functions>
	  </expression-language>
	</configuration>
    <spring:beans>
        <spring:bean id="Bean" name="TransformMap" class="com.mule.custom.kcs.TransformMap"/>
    </spring:beans>
    <db:mysql-config name="MySQL_Configuration" host="localhost" port="3306" user="root" password="Mule1379" database="kcs" doc:name="MySQL Configuration"/>
    <objectstore:config name="ObjectStore__Connector" doc:name="ObjectStore: Connector" partition="itcsm"/>
    <flow name="load-object-store">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/load" doc:name="HTTP"/>
        <parse-template location="src/main/resources/itcsm.csv" doc:name="Parse Template"/>
        <dw:transform-message doc:name="Transform Message">
            <dw:input-payload mimeType="application/csv"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map ((payload01 , indexOfPayload01) -> {
	Id: lower trim payload01.Id,
	VariableName: trim payload01.VariableName
})]]></dw:set-payload>
        </dw:transform-message>
        <logger level="INFO" doc:name="Logger" message="#[payload]"/>
        <foreach doc:name="For Each">
            <objectstore:store config-ref="ObjectStore__Connector" key="#[payload.Id]" value-ref="#[payload.VariableName]" overwrite="true" doc:name="ObjectStore"/>
        </foreach>
        <objectstore:retrieve-all-keys config-ref="ObjectStore__Connector" doc:name="ObjectStore"/>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
    </flow>
    <flow name="decode-8Flow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/check" doc:name="HTTP"/>
        <objectstore:retrieve config-ref="ObjectStore__Connector" key="#[message.inboundProperties.'http.query.params'.id]" doc:name="ObjectStore"/>
        <set-payload value="#[payload]" doc:name="Set Payload"/>
    </flow>
    <flow name="objectstore-lookup">
        <objectstore:retrieve config-ref="ObjectStore__Connector" key="#[payload.b]" doc:name="ObjectStore"/>  
        <logger message="Keys : #[payload]" level="INFO" doc:name="Log Employee Id's"/>      
    </flow>
    <flow name="itcsm-lookup">
        <set-variable variableName="idValue" value="#[payload.b]" doc:name="Variable"/>
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[select VariableName from itcsm where Id = #[flowVars.idValue]]]></db:parameterized-query>
        </db:select>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
trim payload.VariableName[0]]]></dw:set-payload>
        </dw:transform-message>
    </flow>

    <flow name="custom-transFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/decode" allowedMethods="POST" doc:name="HTTP /decode"/>
        <dw:transform-message doc:name="Transform Message">
        	<dw:input-payload mimeType="application/json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload]]></dw:set-payload>
        </dw:transform-message>
        <set-variable variableName="XMLCollection" value="#[[]]" doc:name="Variable"/>
        <foreach collection="#[payload.variables]" doc:name="For Each">
            <invoke name="Invoke" object-ref="TransformMap" method="doTransform" methodArguments="#[payload]" doc:name="Invoke"/>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
{
	"id": payload.id,
	"id_hex": dec2hex(payload.id),
	"value": lookup("objectstore-lookup",{b:dec2hex(payload.id)})
}]]></dw:set-payload>
            </dw:transform-message>
            <logger level="INFO" doc:name="Logger"/>
            <expression-component doc:name="Expression"><![CDATA[#[flowVars.XMLCollection.add(payload)]]]></expression-component>
        </foreach>
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
--- 
{
	"smid": payload.smid,
	"variables": flowVars.XMLCollection
}]]></dw:set-payload>
        </dw:transform-message>
    </flow>

</mule>
